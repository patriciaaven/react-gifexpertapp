{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCNjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGdC,EAHc,gDAGkCC,UAAUH,GAH5C,+DAIDI,MAAOF,GAJN,cAIdG,EAJc,gBAKCA,EAAKC,OALN,uBAKbC,EALa,EAKbA,KAKDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdtB,kBAkBbM,GAlBa,4CAAH,sDCDRO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKc,UAAW,yCAAhB,UACI,qBAAKC,IAAMf,EAAKgB,IAAON,IACvB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECDwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAERxB,EAAQC,GACNwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAACpB,IAEGqB,EDlByBK,CAAa1B,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAKrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAW,YAAhB,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OAGP,aAFA,CAEC,EAAD,eAEQA,GADEA,EAAIC,aEnB7BgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,YAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAWA,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAFhC,KAGE,uBAKE,6BAGQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAIpB,aAHA,CAGC,EAAD,CAEIA,SAAUA,GADHA,Y,MC7BnC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6b10b655.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const habdleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value); //agrega el elemento del input al arreglo\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //previene el comportamiento por defeto del formulario\r\n\r\n        if (inputValue.trim().length > 2) {//para que no agregue valores vacios\r\n            setCategories (cat => [inputValue, ...cat]); //agrega un elemento a la lista\r\n            setInputValue(''); //borra el valor del input\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            {/**<h1>{inputValue}</h1> Probando el inputValue */}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue} //valor que se escribe en el input\r\n                onChange= {habdleInputChange} //cuando escribimos en el input se dispara esta funcion\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n /**Recibir la categoria y hacer una peticion http */\r\n export const getGifs = async (category) => {\r\n\r\n    //Peticion http\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=IZyJMttm1wkXRlrWtBs4qrZOcU1p5QiM`//Pagina GIPHY: search Endpoint\r\n    const resp = await fetch( url ); //fetch hace la solicitud y recupera el recurso que envia la api\r\n    const {data} = await resp.json(); //la resp viene en formato json\r\n\r\n    //console.log(data); //la data trae mucha informacion que no necesito \r\n\r\n    //solo extraigo lo que quiero mutando el arreglo\r\n    const gifs = data.map( img => {\r\n        return { //retorno un objeto\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    //console.log(id, title, url)\r\n\r\n    return (\r\n        <div className= \"card animate__animated animate__fadeIn\">\r\n            <img src ={url} alt = {title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    //console.log(loading); //true\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className= \"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                            //<li key ={img.id}> {img.title}</li>\r\n\r\n                            <GifGridItem \r\n                                key ={img.id}\r\n                                {...img} //envio las propiedades de las imagenes como propiedades independinetes\r\n                            />\r\n                    ))\r\n                }\r\n        \r\n            </div>\r\n\r\n        </>\r\n        \r\n    )\r\n}\r\n","\r\nimport { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading : true\r\n    });\r\n\r\n    useEffect( () => { //los efectos no puede ser async\r\n\r\n       getGifs(category) //como es una promesa\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state; //data: [], loading: true\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['Club57', 'The Loud House', 'The Casagrande']; // solo se hace de esta manera si el arreglo nunca cambia\r\n    const [categories, setCategories] = useState(['Gumball']);\r\n\r\n    // const handleAdd = () =>{ {/**Agregar un nuevo elemento al arreglo */}\r\n    //     setCategories( [...categories, 'Gunball']); //mantengo las categorias viejas y agrego una nueva\r\n\r\n    //     //haciendolo de otra forma\r\n    //     //setCategories(cat => [...cat, 'Gunball']);\r\n\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2> \r\n          <AddCategory setCategories = {setCategories} />  {/**Para poder manejarlo en AddCategory */}\r\n          <hr />\r\n\r\n          {/**<button onClick= {handleAdd}>Agregar</button>*/}\r\n\r\n            {/**MOSTRANDO EL ARREGLO DE CATEGORIAS */}\r\n            <ol>\r\n                {   \r\n                    /**Barrer los elementos del arreglo y retornar el necesario */\r\n                    categories.map( category => (\r\n                        //return <li key={category}>{category}</li>\r\n                        \r\n                        /**Agregar elementos a la lista */\r\n                        <GifGrid \r\n                            key = {category} \r\n                            category={category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {GifExpertApp} from './GifExpertApp';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}